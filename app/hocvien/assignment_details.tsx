import { Ionicons, MaterialCommunityIcons } from "@expo/vector-icons";
import { Stack, useLocalSearchParams, useRouter } from "expo-router";
import React, { useMemo, useState } from "react";
import { Alert, ScrollView, StyleSheet, Text, TouchableOpacity, View } from "react-native";

// --- D·ªÆ LI·ªÜU GI·∫¢ ƒê·ªäNH (ƒê√É ƒê∆Ø·ª¢C M√î T·∫¢ RI√äNG) ---
const DANGER_COLOR = '#dc3545';
const PASS_COLOR = '#28a745';
const ACCENT_COLOR = '#ff7043'; // M√†u Cam ch·ªß ƒë·∫°o

interface Assignment {
    id: string;
    title: string;
    course: string;
    dueDate: string;
    status: 'Pending' | 'Graded' | 'Due' | 'Completed';
    score?: number;
    maxScore: number;
    description: string; // M√¥ t·∫£ ri√™ng
    submissionFormat: string;
}

const ASSIGNMENT_DATA: Assignment[] = [
    { 
        id: 'A001', 
        title: 'B√†i t·∫≠p Unit 5: Ng·ªØ ph√°p Tense', 
        course: 'IELTS Writing 7.0', 
        dueDate: '2025-10-28 (23:59)', 
        status: 'Due', 
        maxScore: 10,
        description: 'Ph√¢n t√≠ch v√† s·ª≠a l·ªói trong ƒëo·∫°n vƒÉn ƒë∆∞·ª£c cung c·∫•p, t·∫≠p trung v√†o th√¨ hi·ªán t·∫°i ho√†n th√†nh v√† qu√° kh·ª© ƒë∆°n. Y√™u c·∫ßu n·ªôp file ƒë√∫ng ƒë·ªãnh d·∫°ng PDF.',
        submissionFormat: 'T·ªáp tin DOCX/PDF (T·ªëi ƒëa 5MB)',
    },
    { 
        id: 'A002', // üî• B√ÄI T·∫¨P GI·ªÆA K·ª≤ M·ªöI
        title: 'B√†i ki·ªÉm tra Gi·ªØa k·ª≥ (Listening)', 
        course: 'TOEIC Giao Ti·∫øp', 
        dueDate: '2025-10-25', 
        status: 'Due', 
        maxScore: 100,
        description: 'B√†i ki·ªÉm tra k·ªπ nƒÉng Nghe, g·ªìm 100 c√¢u h·ªèi trong 45 ph√∫t. ƒê√°nh gi√° kh·∫£ nƒÉng hi·ªÉu gi·ªçng Anh M·ªπ v√† Anh Anh.',
        submissionFormat: 'Thi tr·ª±c tuy·∫øn (Online Test)',
    },
    { 
        id: 'A003', 
        title: 'Assignment 2: Ph√¢n t√≠ch VƒÉn b·∫£n', 
        course: 'Ng·ªØ Ph√°p N√¢ng Cao', 
        dueDate: '2025-10-20', 
        status: 'Graded', 
        score: 8.5, 
        maxScore: 10,
        description: 'B√†i t·∫≠p ƒë√£ ƒë∆∞·ª£c ch·∫•m ƒëi·ªÉm. Xem chi ti·∫øt ph·∫£n h·ªìi c·ªßa Gi·∫£ng vi√™n.',
        submissionFormat: 'ƒê√£ n·ªôp v√†o 20/10/2025',
    },
    { 
        id: 'A004', // üî• B√ÄI T·∫¨P UNIT 4 M·ªöI
        title: 'B√†i t·∫≠p Unit 4 (ƒê√£ qu√° h·∫°n)', 
        course: 'IELTS Writing 7.0', 
        dueDate: '2025-10-15', 
        status: 'Due', 
        maxScore: 10, 
        description: 'B√†i t·∫≠p Qu√° h·∫°n: Vi·∫øt ƒëo·∫°n vƒÉn so s√°nh gi·ªØa hai lo·∫°i h√¨nh gi√°o d·ª•c. C·∫ßn li√™n h·ªá Gi·∫£ng vi√™n ƒë·ªÉ ƒë∆∞·ª£c m·ªü l·∫°i h·ªá th·ªëng n·ªôp b√†i.',
        submissionFormat: 'Qu√° h·∫°n n·ªôp b√†i',
    },
    
];

// üî• S·ª¨A: H√†m t√¨m ki·∫øm ch√≠nh x√°c b·∫±ng ID
const findAssignmentById = (id: string) => {
    // D√πng .find() ƒë·ªÉ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng kh·ªõp ƒë·∫ßu ti√™n
    return ASSIGNMENT_DATA.find(a => a.id === id); 
};


// --- COMPONENT PH·ª§: Th·∫ª Th√¥ng tin Chi ti·∫øt ---
interface InfoCardProps { icon: string, label: string, value: string | number, color: string }
const InfoCard: React.FC<InfoCardProps> = ({ icon, label, value, color }) => (
    <View style={styles.infoCard}>
        <MaterialCommunityIcons name={icon as any} size={20} color={color} style={{marginRight: 10, width: 25}} />
        <Text style={styles.infoLabel}>{label}</Text>
        <Text style={styles.infoValue}>{value}</Text>
    </View>
);
// ---------------------------------------------

export default function HocVienAssignmentDetailsScreen() {
    const router = useRouter();
    const { id } = useLocalSearchParams();
    const assignmentId = id as string;
    
    const [fileStatus, setFileStatus] = useState<'none' | 'uploaded'>('none');

    const assignmentDetail: Assignment | undefined = useMemo(() => {
        // üî• L·ªñI ƒê√É KH·∫ÆC PH·ª§C: H√†m t√¨m ki·∫øm ch√≠nh x√°c b·∫±ng assignmentId
        return findAssignmentById(assignmentId); 
    }, [assignmentId]);

    if (!assignmentDetail) {
        return (
            <View style={styles.errorContainer}>
                <Stack.Screen options={{ title: "Kh√¥ng t√¨m th·∫•y" }} />
                <Text style={styles.errorText}>Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p n√†y.</Text>
                <TouchableOpacity onPress={() => router.back()}><Text style={{color: ACCENT_COLOR, marginTop: 15}}>Quay l·∫°i</Text></TouchableOpacity>
            </View>
        );
    }
    
    const isGraded = assignmentDetail.status === 'Graded';
    const isDue = assignmentDetail.status === 'Due' || assignmentDetail.status === 'Pending';
    const isPassed = assignmentDetail.score! >= 7; 
    const statusColor = isGraded ? (isPassed ? PASS_COLOR : DANGER_COLOR) : ACCENT_COLOR;
    
    const handleSubmission = () => {
        if (fileStatus === 'uploaded') {
            Alert.alert('X√°c nh·∫≠n', 'B·∫°n c√≥ mu·ªën n·ªôp b√†i ƒë√£ t·∫£i l√™n kh√¥ng?', [
                { text: 'H·ªßy' },
                { text: 'N·ªôp', onPress: () => alert('ƒê√£ n·ªôp b√†i th√†nh c√¥ng!'), style: 'default' },
            ]);
        } else {
            alert('M·ªü h·ªôp tho·∫°i ch·ªçn file...');
            setFileStatus('uploaded'); // Gi·∫£ l·∫≠p file ƒë√£ ƒë∆∞·ª£c ch·ªçn
        }
    };


    return (
        <ScrollView style={styles.scrollContainer}>
            <Stack.Screen options={{ title: 'Chi ti·∫øt B√†i t·∫≠p' }} />

            {/* PH·∫¶N 1: HEADER & T√ìM T·∫ÆT */}
            <View style={[styles.header, { borderLeftColor: statusColor }]}>
                <Text style={styles.headerCourse}>{assignmentDetail.course}</Text>
                <Text style={styles.headerTitle}>{assignmentDetail.title}</Text>
                <Text style={[styles.statusBadge, { backgroundColor: statusColor }]}>
                    {isGraded ? (isPassed ? `ƒê·∫†T: ${assignmentDetail.score}/${assignmentDetail.maxScore}` : `CH∆ØA ƒê·∫†T: ${assignmentDetail.score}/${assignmentDetail.maxScore}`) : 'ƒêANG CH·ªú X·ª¨ L√ù'}
                </Text>
            </View>
            
            {/* PH·∫¶N 2: TH√îNG TIN CHI TI·∫æT */}
            <View style={styles.card}>
                <Text style={styles.sectionTitle}>Th√¥ng tin B√†i t·∫≠p</Text>
                
                <InfoCard icon="calendar-clock-outline" label="Ng√†y h·∫øt h·∫°n" value={assignmentDetail.dueDate} color="#333" />
                <InfoCard icon="medal-outline" label="ƒêi·ªÉm t·ªëi ƒëa" value={`${assignmentDetail.maxScore} ƒëi·ªÉm`} color="#007bff" />
                <InfoCard icon="book-open-variant" label="M√¥n h·ªçc" value={assignmentDetail.course} color="#28a745" />

                <Text style={styles.descriptionLabel}>M√¥ t·∫£ chi ti·∫øt:</Text>
                <Text style={styles.descriptionText}>{assignmentDetail.description}</Text>
            </View>

            {/* PH·∫¶N 3: KHU V·ª∞C N·ªòP B√ÄI (Ch·ªâ hi·ªÉn th·ªã khi ƒëang ch·ªù) */}
            {isDue && (
                <View style={styles.submissionCard}>
                    <Text style={styles.submissionTitle}>Khu v·ª±c N·ªôp B√†i</Text>
                    <View style={styles.fileUploadStatus}>
                        <Ionicons name={fileStatus === 'uploaded' ? 'cloud-done-outline' : 'cloud-upload-outline'} size={20} color={fileStatus === 'uploaded' ? PASS_COLOR : ACCENT_COLOR} />
                        <Text style={[styles.fileStatusText, { color: fileStatus === 'uploaded' ? PASS_COLOR : ACCENT_COLOR }]}>
                            {fileStatus === 'uploaded' ? assignmentDetail.submissionFormat : 'Ch∆∞a c√≥ t·ªáp n√†o ƒë∆∞·ª£c ch·ªçn.'}
                        </Text>
                    </View>
                    
                    <TouchableOpacity style={[styles.submitButton, { backgroundColor: fileStatus === 'uploaded' ? PASS_COLOR : ACCENT_COLOR }]} onPress={handleSubmission}>
                        <Text style={styles.submitButtonText}>{fileStatus === 'uploaded' ? 'N·ªòP B√ÄI CU·ªêI C√ôNG' : 'T·∫¢I T·ªÜP L√äN'}</Text>
                    </TouchableOpacity>
                </View>
            )}

             {/* PH·∫¶N 4: TH√îNG TIN CH·∫§M ƒêI·ªÇM (Ch·ªâ hi·ªÉn th·ªã khi ƒë√£ ch·∫•m) */}
             {isGraded && (
                <View style={[styles.card, { backgroundColor: isPassed ? '#e6fff0' : '#ffe6e6', borderLeftColor: statusColor, borderLeftWidth: 5 }]}>
                    <Text style={[styles.sectionTitle, { borderBottomColor: isPassed ? PASS_COLOR : DANGER_COLOR }]}>Ph·∫£n h·ªìi Gi·∫£ng vi√™n</Text>
                    <View style={styles.feedbackRow}>
                        <Text style={styles.feedbackLabel}>ƒêi·ªÉm s·ªë:</Text>
                        <Text style={[styles.feedbackValue, { color: statusColor }]}>{assignmentDetail.score!.toFixed(1)} / {assignmentDetail.maxScore}</Text>
                    </View>
                    <View style={styles.feedbackRow}>
                        <Text style={styles.feedbackLabel}>Ph·∫£n h·ªìi:</Text>
                        <Text style={styles.feedbackText}>B√†i l√†m t·ªët, tuy nhi√™n c·∫ßn c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c trong ph·∫ßn ng·ªØ ph√°p ph·ª©c t·∫°p.</Text>
                    </View>
                </View>
            )}

            <View style={{height: 40}} />
        </ScrollView>
    );
}

const styles = StyleSheet.create({
    scrollContainer: { flex: 1, backgroundColor: '#f0f3f5' },
    errorContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#f0f3f5' },
    errorText: { fontSize: 16, color: DANGER_COLOR, marginTop: 10 },

    // Header
    header: { 
        padding: 20, 
        backgroundColor: 'white',
        borderLeftWidth: 5, 
        marginBottom: 10,
        paddingBottom: 25,
    },
    headerCourse: { fontSize: 14, color: '#666' },
    headerTitle: { fontSize: 24, fontWeight: '900', color: '#333', marginTop: 5 },
    statusBadge: {
        alignSelf: 'flex-start',
        paddingHorizontal: 10,
        paddingVertical: 5,
        borderRadius: 20,
        fontSize: 12,
        fontWeight: 'bold',
        marginTop: 10,
        color: 'white',
        overflow: 'hidden',
    },

    // Card & Detail Rows
    card: {
        backgroundColor: 'white',
        borderRadius: 10,
        padding: 20,
        marginHorizontal: 15,
        marginBottom: 15,
        elevation: 3,
        shadowOpacity: 0.1,
    },
    sectionTitle: {
        fontSize: 18,
        fontWeight: '700',
        color: '#333',
        marginBottom: 15,
    },
    infoCard: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: 10,
        borderBottomWidth: 1,
        borderBottomColor: '#f7f7f7',
    },
    infoLabel: { fontSize: 14, color: '#666', fontWeight: '500', marginLeft: 10, width: 100 },
    infoValue: { flex: 1, fontSize: 16, fontWeight: '600', color: '#333' },
    descriptionLabel: { fontSize: 14, fontWeight: '600', color: '#555', marginTop: 15, marginBottom: 5 },
    descriptionText: { fontSize: 15, color: '#666', lineHeight: 22 },

    // Submission Area
    submissionCard: {
        padding: 20,
        backgroundColor: 'white',
        marginHorizontal: 15,
        marginBottom: 15,
        borderRadius: 10,
        borderWidth: 2,
        borderColor: ACCENT_COLOR + '50',
        borderStyle: 'dashed',
    },
    submissionTitle: { fontSize: 18, fontWeight: 'bold', color: ACCENT_COLOR, marginBottom: 15 },
    fileUploadStatus: { flexDirection: 'row', alignItems: 'center', marginBottom: 15 },
    fileStatusText: { marginLeft: 10, fontSize: 15, fontWeight: '600' },
    submitButton: {
        padding: 15,
        borderRadius: 10,
        alignItems: 'center',
    },
    submitButtonText: {
        color: 'white',
        fontSize: 16,
        fontWeight: 'bold',
    },
    
    // Feedback Area
    feedbackRow: {
        flexDirection: 'row',
        paddingVertical: 8,
    },
    feedbackLabel: {
        fontSize: 15,
        fontWeight: '600',
        color: '#666',
        width: 120,
    },
    feedbackValue: {
        fontSize: 16,
        fontWeight: 'bold',
    },
    feedbackText: {
        fontSize: 15,
        color: '#333',
        flex: 1,
    }
});