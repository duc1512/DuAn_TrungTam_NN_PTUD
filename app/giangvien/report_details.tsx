import { Ionicons, MaterialCommunityIcons } from "@expo/vector-icons";
import { Stack, useRouter } from "expo-router";
import React, { useMemo } from "react";
import { Dimensions, FlatList, StyleSheet, Text, TouchableOpacity, View } from "react-native";

// L·∫•y chi·ªÅu r·ªông m√†n h√¨nh
const screenWidth = Dimensions.get('window').width;

// --- D·ªÆ LI·ªÜU GI·∫¢ ƒê·ªäNH ---
interface TeachingLog {
    id: number;
    date: string;
    className: string;
    duration: number; // Th·ªùi l∆∞·ª£ng t√≠nh b·∫±ng ph√∫t
    status: 'Completed' | 'Cancelled';
}

const REPORT_TITLE = "B√°o c√°o Gi·ªù C√¥ng Th√°ng 10";
const TEACHER_PAYRATE = 450000; // 450,000 VNƒê/gi·ªù
const FIXED_HOURS = 125; 

// üî• H√ÄM ƒê√É S·ª¨A: TƒÉng s·ªë bu·ªïi l√™n 93 ƒë·ªÉ b√π tr·ª´ cho 10% b·ªã h·ªßy (93 * 90 ph√∫t / 60 ‚âà 140 gi·ªù l·∫≠p l·ªãch)
const generateMockLogs = (targetHours: number): TeachingLog[] => {
    const logs: TeachingLog[] = [];
    const MINUTES_PER_SESSION = 90;
    // C·∫ßn kho·∫£ng 93 bu·ªïi ƒë·ªÉ t·ªïng s·ªë ho√†n th√†nh ƒë·∫°t 125 gi·ªù
    const SESSIONS_REQUIRED = 93; 

    const baseClasses = ['IELTS Writing (G3)', 'Ng·ªØ Ph√°p N√¢ng Cao', 'TOEIC Giao Ti·∫øp (B2)'];
    let currentDate = new Date('2025-10-01');

    for (let i = 0; i < SESSIONS_REQUIRED; i++) {
        currentDate.setDate(currentDate.getDate() + (i % 2 === 0 ? 1 : 2)); 

        logs.push({
            id: i + 1,
            date: currentDate.toISOString().split('T')[0],
            className: baseClasses[i % baseClasses.length],
            duration: MINUTES_PER_SESSION,
            status: (i % 10 === 7) ? 'Cancelled' : 'Completed', // 10% h·ªßy
        });
    }
    return logs;
};

const MONTHLY_LOGS: TeachingLog[] = generateMockLogs(FIXED_HOURS);
const MAIN_COLOR = '#ff7043'; 


// --- COMPONENT PH·ª§: Th·∫ª Chi ti·∫øt Bu·ªïi d·∫°y ---
const LogItemCard: React.FC<{ item: TeachingLog }> = ({ item }) => {
    const isCancelled = item.status === 'Cancelled';
    const timeInHours = item.duration / 60; 
    const statusColor = isCancelled ? '#dc3545' : '#28a745';
    const icon = isCancelled ? 'calendar-remove-outline' : 'calendar-check-outline';

    return (
        <View style={[styles.logCard, isCancelled && styles.logCardCancelled]}>
            <MaterialCommunityIcons name={icon as any} size={24} color={statusColor} style={styles.logIcon} />
            
            <View style={styles.logInfo}>
                <Text style={styles.logClassName}>{item.className}</Text>
                <Text style={styles.logDate}>
                    <Ionicons name="calendar-outline" size={12} /> {new Date(item.date).toLocaleDateString('vi-VN')}
                </Text>
            </View>
            
            <View style={styles.logDuration}>
                <Text style={[styles.durationValue, {color: statusColor}]}>
                    {timeInHours.toFixed(1)} {isCancelled ? '‚Äî' : 'gi·ªù'}
                </Text>
                <Text style={styles.durationUnit}>{isCancelled ? 'ƒê√£ h·ªßy' : 'Ho√†n th√†nh'}</Text>
            </View>
        </View>
    );
};
// ---------------------------------------------


export default function GiangVienReportDetailsScreen() {
    const router = useRouter(); 

    // T√≠nh t·ªïng gi·ªù c√¥ng th·ª±c t·∫ø (ch·ªâ t√≠nh Completed)
    const totalDurationMinutes = useMemo(() => {
        return MONTHLY_LOGS.filter(log => log.status === 'Completed').reduce((sum, log) => sum + log.duration, 0);
    }, []);
    
    const totalTeachingHours = (totalDurationMinutes / 60).toFixed(1);
    const estimatedSalary = (totalDurationMinutes / 60 * TEACHER_PAYRATE).toLocaleString('vi-VN') + ' VNƒê';


    return (
        <View style={styles.mainContainer}>
            <Stack.Screen options={{ title: 'B√°o c√°o Gi·ªù C√¥ng' }} />

            <View style={styles.header}>
                <Text style={styles.headerTitle}>{REPORT_TITLE}</Text>
                <Text style={styles.headerSubtitle}>Sao k√™ chi ti·∫øt c√°c bu·ªïi gi·∫£ng d·∫°y</Text>
            </View>
            
            {/* T√ìM T·∫ÆT CHUNG */}
            <View style={styles.summaryCard}>
                <Text style={styles.summaryTitle}>T·ªïng Gi·ªù c√¥ng Ho√†n th√†nh</Text>
                <View style={styles.summaryRow}>
                    {/* üî• S·ªê LI·ªÜU ƒê√É ƒê·ªíNG B·ªò (‚âà 125 Gi·ªù) */}
                    <Text style={styles.totalHoursValue}>{totalTeachingHours} Gi·ªù</Text>
                    <Text style={styles.salaryEstimate}>{estimatedSalary}</Text>
                </View>
            </View>

            {/* DANH S√ÅCH CHI TI·∫æT */}
            <View style={styles.section}>
                <Text style={styles.sectionTitle}>L·ªãch s·ª≠ Giao d·ªãch (Chi ti·∫øt)</Text>
                <FlatList
                    data={MONTHLY_LOGS}
                    keyExtractor={item => item.id.toString()}
                    renderItem={({ item }) => <LogItemCard item={item} />}
                    contentContainerStyle={styles.listContent}
                    style={styles.list}
                    ListEmptyComponent={<Text style={styles.emptyText}>Kh√¥ng c√≥ l·ªãch s·ª≠ c√¥ng t√°c n√†o.</Text>}
                />
            </View>
            
            <TouchableOpacity style={styles.printButton} onPress={() => alert('Xu·∫•t B√°o c√°o d∆∞·ªõi d·∫°ng PDF')}>
                <MaterialCommunityIcons name="export" size={20} color="white" />
                <Text style={styles.printButtonText}>XU·∫§T B√ÅO C√ÅO (PDF)</Text>
            </TouchableOpacity>
        </View>
    );
}

const styles = StyleSheet.create({
    mainContainer: { flex: 1, backgroundColor: '#f0f3f5' },
    header: { padding: 15, backgroundColor: 'white', borderBottomWidth: 1, borderBottomColor: '#eee', marginBottom: 10 },
    headerTitle: { fontSize: 20, fontWeight: '900', color: MAIN_COLOR },
    headerSubtitle: { fontSize: 14, color: '#666', marginTop: 3 },
    
    // Summary Card
    summaryCard: {
        padding: 15,
        backgroundColor: 'white',
        marginHorizontal: 10,
        marginBottom: 15,
        borderRadius: 10,
        borderLeftWidth: 5,
        borderLeftColor: MAIN_COLOR,
        elevation: 3,
        shadowOpacity: 0.1,
    },
    summaryTitle: { fontSize: 16, color: '#666' },
    summaryRow: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'flex-end', marginTop: 10 },
    totalHoursValue: { fontSize: 28, fontWeight: 'bold', color: MAIN_COLOR },
    salaryEstimate: { fontSize: 16, fontWeight: '600', color: '#28a745' },

    // Detail Log List
    section: { 
        flex: 1, 
        marginHorizontal: 10, 
        backgroundColor: 'white', 
        borderRadius: 10, 
        elevation: 1, 
        shadowOpacity: 0.05 
    },
    sectionTitle: { fontSize: 16, fontWeight: 'bold', color: '#333', padding: 15, borderBottomWidth: 1, borderBottomColor: '#eee' },
    list: { flex: 1 },
    listContent: { paddingHorizontal: 15, paddingBottom: 15 },
    
    logCard: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: 12,
        borderBottomWidth: 1,
        borderBottomColor: '#f7f7f7',
    },
    logCardCancelled: {
        opacity: 0.6,
        backgroundColor: '#fffafa'
    },
    logIcon: { marginRight: 15, width: 30 },
    logInfo: { flex: 1 },
    logClassName: { fontSize: 15, fontWeight: '600', color: '#333' },
    logDate: { fontSize: 12, color: '#666', marginTop: 3 },
    logDuration: { alignItems: 'flex-end' },
    durationValue: { fontSize: 16, fontWeight: 'bold' },
    durationUnit: { fontSize: 12, color: '#999', marginTop: 2 },
    
    emptyText: { textAlign: 'center', padding: 20, color: '#666' },

    // Print Button
    printButton: {
        flexDirection: 'row',
        backgroundColor: '#007bff',
        padding: 15,
        justifyContent: 'center',
        alignItems: 'center',
        margin: 10,
        borderRadius: 10,
        elevation: 5,
    },
    printButtonText: {
        color: 'white',
        fontWeight: 'bold',
        fontSize: 18,
        marginLeft: 10,
    }
});