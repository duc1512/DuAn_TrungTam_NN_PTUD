import { MaterialCommunityIcons } from '@expo/vector-icons';
import { Stack, useLocalSearchParams, useRouter } from "expo-router";
import React, { useState } from "react";
import { Alert, FlatList, Keyboard, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from "react-native";

// --- INTERFACE V√Ä D·ªÆ LI·ªÜU C·ªê ƒê·ªäNH ---
interface GradeItem {
    studentId: string;
    score: number;
}
interface Student {
    id: string;
    name: string;
}
interface Assignment {
    key: string; // T√™n vi·∫øt t·∫Øt
    name: string; // T√™n ƒë·∫ßy ƒë·ªß c·ªßa b√†i ki·ªÉm tra/m√¥n h·ªçc
    maxScore: number;
    passScore: number;
}

const MAIN_COLOR = '#ff7043'; // M√†u ch·ªß ƒë·∫°o Gi·∫£ng vi√™n
const MAX_SCORE = 10.0;

// Danh s√°ch h·ªçc vi√™n c·ªë ƒë·ªãnh cho l·ªõp n√†y (M√¥ ph·ªèng 15 HV)
const FIXED_STUDENTS: Student[] = [
    { id: 'U101', name: 'Nguy·ªÖn VƒÉn A' }, { id: 'U102', name: 'Tr·∫ßn Th·ªã B' },
    { id: 'U103', name: 'L√™ VƒÉn C' }, { id: 'U104', name: 'Ph·∫°m Th·ªã D' },
    { id: 'U105', name: 'Ho√†ng Th·ªã E' }, { id: 'U106', name: 'ƒê·∫∑ng VƒÉn F' },
    { id: 'U107', name: 'Mai Th·ªã G' }, { id: 'U108', name: 'B√πi ƒê·ª©c H' },
    { id: 'U109', name: 'V≈© Th·ªã K' }, { id: 'U110', name: 'Tr·ªãnh VƒÉn L' },
    { id: 'U111', name: 'Phan Th·ªã M' }, { id: 'U112', name: 'Ng√¥ VƒÉn N' },
    { id: 'U113', name: 'H√† Th·ªã P' }, { id: 'U114', name: 'Ch√¢u Minh Q' },
    { id: 'U115', name: 'ƒêo√†n Th·ªã R' },
];

// üî• DANH S√ÅCH C√ÅC H·ªåC PH·∫¶N/B√ÄI KI·ªÇM TRA CHO L·ªöP N√ÄY
const MOCK_ASSIGNMENTS: Assignment[] = [
    { key: 'MID', name: 'ƒêi·ªÉm gi·ªØa k·ª≥', maxScore: 10, passScore: 7.0 },
    { key: 'FINAL', name: 'ƒêi·ªÉm cu·ªëi k·ª≥', maxScore: 10, passScore: 7.5 },
    { key: 'PRJ', name: 'B√†i t·∫≠p D·ª± √°n', maxScore: 10, passScore: 6.0 },
    { key: 'ATT', name: 'ƒêi·ªÉm chuy√™n c·∫ßn', maxScore: 10, passScore: 9.0 },
];

// H√†m Helper t·∫°o ƒëi·ªÉm ng·∫´u nhi√™n (ch·ªâ d√πng ƒë·ªÉ m√¥ ph·ªèng d·ªØ li·ªáu ban ƒë·∫ßu)
const getRandomScore = (min: number, max: number): number => {
    // 80% c√≥ ƒëi·ªÉm, 20% l√† 0 (ch∆∞a ch·∫•m)
    if (Math.random() < 0.2) return 0; 
    return parseFloat((Math.random() * (max - min) + min).toFixed(1));
};


export default function GiangVienGradingScreen() {
    const router = useRouter();
    const { classId, className, courseName, schedule } = useLocalSearchParams(); 

    // üî• D·ªØ li·ªáu State ch·ª©a ƒëi·ªÉm cho T·∫§T C·∫¢ c√°c h·ªçc ph·∫ßn (Key l√† Assignment Key)
    const [allGrades, setAllGrades] = useState<Record<string, GradeItem[]>>(() => {
        const initialGrades: Record<string, GradeItem[]> = {};
        
        MOCK_ASSIGNMENTS.forEach(assignment => {
            // T·∫°o ƒëi·ªÉm ng·∫´u nhi√™n ban ƒë·∫ßu cho m·ªói h·ªçc vi√™n v√† m·ªói h·ªçc ph·∫ßn
            initialGrades[assignment.key] = FIXED_STUDENTS.map(student => ({
                studentId: student.id,
                score: getRandomScore(5.0, assignment.maxScore)
            }));
        });
        return initialGrades;
    });
    
    const [selectedAssignmentKey, setSelectedAssignmentKey] = useState(MOCK_ASSIGNMENTS[0].key);

    const currentClassName = (className as string) || "L·ªõp A3";
    const currentCourseName = (courseName as string) || "Ti·∫øng anh si√™u c·∫•p";
    const currentSchedule = (schedule as string) || "21/10 ƒë·∫øn1/1-2025";
    const currentClassId = (classId as string) || "2351212";

    // L·∫•y th√¥ng tin h·ªçc ph·∫ßn ƒëang ch·ªçn
    const currentAssignment = MOCK_ASSIGNMENTS.find(a => a.key === selectedAssignmentKey)!;
    // L·∫•y b·∫£ng ƒëi·ªÉm hi·ªán t·∫°i
    const currentGrades = allGrades[selectedAssignmentKey] || [];
    
    // --- H√ÄM X·ª¨ L√ù NH·∫¨P ƒêI·ªÇM ---
    const handleScoreChange = (text: string, studentId: string) => {
        const score = parseFloat(text.replace(',', '.')); 
        
        if (isNaN(score) || score < 0 || score > currentAssignment.maxScore) {
            return; 
        }
        
        setAllGrades(prevAllGrades => ({
            ...prevAllGrades,
            [selectedAssignmentKey]: prevAllGrades[selectedAssignmentKey].map(gradeItem => 
                gradeItem.studentId === studentId ? { ...gradeItem, score: score } : gradeItem
            ),
        }));
    };

    // --- H√ÄM L∆ØU T·∫§T C·∫¢ ƒêI·ªÇM ---
    const handleSaveAllGrades = () => {
        Alert.alert(
            "L∆∞u ƒêi·ªÉm th√†nh c√¥ng",
            `ƒê√£ c·∫≠p nh·∫≠t ƒëi·ªÉm cho ${currentGrades.length} h·ªçc vi√™n trong ${currentAssignment.name}.`,
            [{ text: "OK", onPress: () => router.back() }]
        );
        Keyboard.dismiss(); 
    };

    // --- H√ÄM RENDER ITEM ---
    const renderGradeItem = ({ item: student, index }: { item: Student, index: number }) => {
        const gradeItem = currentGrades.find(g => g.studentId === student.id);
        const score = gradeItem ? gradeItem.score : 0;
        const scoreString = score === 0 ? '' : score.toFixed(1);
        
        const scoreColor = score >= currentAssignment.passScore ? '#28a745' : (score > 0 ? MAIN_COLOR : '#ccc');

        return (
            <View style={styles.gradeItem}>
                <View style={styles.studentIndexContainer}>
                    <Text style={styles.studentIndex}>{index + 1}.</Text>
                    <Text style={styles.studentName} numberOfLines={1}>{student.name}</Text>
                    <Text style={styles.studentId}>ID: {student.id}</Text>
                </View>

                {/* KH·ªêI NH·∫¨P ƒêI·ªÇM V√Ä HI·ªÇN TH·ªä */}
                <View style={styles.scoreBlock}>
                    <Text style={[styles.statusTag, { backgroundColor: scoreColor }]}>
                        {score >= currentAssignment.passScore ? 'ƒê·∫†T' : (score > 0 ? 'CH∆ØA ƒê·∫†T' : 'CH∆ØA CH·∫§M')}
                    </Text>
                    <TextInput
                        style={[styles.scoreInput, { borderColor: scoreColor }]}
                        placeholder={`/${currentAssignment.maxScore.toFixed(0)}`}
                        keyboardType="numeric"
                        // Gi√° tr·ªã ban ƒë·∫ßu c·∫ßn ƒë∆∞·ª£c l√†m tr√≤n v√† chuy·ªÉn sang chu·ªói
                        defaultValue={scoreString} 
                        onChangeText={(text) => handleScoreChange(text, student.id)}
                        onBlur={(e) => {
                             if (e.nativeEvent.text.trim() === '') {
                                handleScoreChange('0', student.id);
                             }
                        }}
                    />
                </View>
            </View>
        );
    };

    return (
        <View style={styles.mainContainer}>
            <Stack.Screen options={{ title: 'Nh·∫≠p/S·ª≠a ƒêi·ªÉm' }} />

            {/* HEADER T√ìM T·∫ÆT TH√îNG TIN L·ªöP */}
            <View style={styles.header}>
                <Text style={styles.headerTitle}>B·∫£ng ƒêi·ªÉm L·ªõp</Text>
                <View style={styles.headerDetailsRow}>
                    <Text style={styles.classNameText}>L·ªõp: <Text style={{fontWeight: 'bold', color: MAIN_COLOR}}>{currentClassName}</Text></Text>
                    <Text style={styles.classNameText}>M√¥n: <Text style={{fontWeight: 'bold', color: '#28a745'}}>{currentCourseName}</Text></Text>
                </View>
                <Text style={styles.infoText}>L·ªãch h·ªçc: <Text style={{fontWeight: 'bold', color: '#6f42c1'}}>{currentSchedule}</Text></Text>
                <Text style={styles.infoText}>M√£ l·ªõp: {currentClassId}</Text>
            </View>
            
            {/* üî• THANH CH·ªåN H·ªåC PH·∫¶N */}
            <View style={styles.assignmentSelectorContainer}>
                <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                    {MOCK_ASSIGNMENTS.map((assignment) => (
                        <TouchableOpacity
                            key={assignment.key}
                            style={[
                                styles.assignmentPill,
                                selectedAssignmentKey === assignment.key && styles.assignmentPillActive
                            ]}
                            onPress={() => setSelectedAssignmentKey(assignment.key)}
                        >
                            <Text style={[
                                styles.assignmentPillText,
                                selectedAssignmentKey === assignment.key && styles.assignmentPillTextActive
                            ]}>
                                {assignment.name}
                            </Text>
                        </TouchableOpacity>
                    ))}
                </ScrollView>
                <View style={styles.assignmentDetailsBar}>
                    <Text style={styles.assignmentDetailText}>ƒêi·ªÉm ƒë·∫°t: {currentAssignment.passScore}/{currentAssignment.maxScore}</Text>
                    <Text style={styles.assignmentDetailText}>HV: {FIXED_STUDENTS.length}</Text>
                </View>
            </View>


            {/* FLATLIST DANH S√ÅCH ƒêI·ªÇM */}
            <FlatList
                data={FIXED_STUDENTS} // Render danh s√°ch h·ªçc vi√™n c·ªë ƒë·ªãnh
                renderItem={renderGradeItem}
                keyExtractor={item => item.id}
                style={styles.list}
                contentContainerStyle={styles.listContent}
            />

            {/* N√öT L∆ØU ƒêI·ªÇM N·ªîI B·∫¨T */}
            <View style={styles.saveButtonContainer}>
                <TouchableOpacity style={styles.saveButton} onPress={handleSaveAllGrades}>
                    <MaterialCommunityIcons name="content-save-check-outline" size={24} color="white" />
                    <Text style={styles.saveButtonText}>L∆ØU ƒêI·ªÇM {currentAssignment.name.toUpperCase()}</Text>
                </TouchableOpacity>
            </View>
        </View>
    );
}

// KH·ªêI STYLES
const styles = StyleSheet.create({
    mainContainer: { flex: 1, backgroundColor: '#f0f3f5' },
    header: { padding: 15, backgroundColor: 'white', borderBottomWidth: 1, borderBottomColor: '#eee', marginBottom: 5 },
    headerTitle: { fontSize: 20, fontWeight: '900', color: '#333' },
    classNameText: { fontSize: 16, color: '#666', marginTop: 8 },
    headerDetailsRow: { flexDirection: 'row', justifyContent: 'space-between' },
    infoText: { fontSize: 14, color: '#999', marginTop: 3 },
    
    // üî• ASSIGNMENT SELECTOR STYLES
    assignmentSelectorContainer: { 
        backgroundColor: 'white', 
        paddingHorizontal: 15,
        paddingTop: 10,
        paddingBottom: 5,
        borderBottomWidth: 1,
        borderBottomColor: '#eee'
    },
    assignmentPill: {
        paddingHorizontal: 15,
        paddingVertical: 8,
        borderRadius: 20,
        backgroundColor: '#f9f9f9',
        marginRight: 10,
        borderWidth: 1,
        borderColor: '#ddd'
    },
    assignmentPillActive: {
        backgroundColor: MAIN_COLOR,
        borderColor: MAIN_COLOR,
    },
    assignmentPillText: {
        fontSize: 14,
        fontWeight: '600',
        color: '#333',
    },
    assignmentPillTextActive: {
        color: 'white',
    },
    assignmentDetailsBar: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingVertical: 8,
    },
    assignmentDetailText: {
        fontSize: 12,
        color: '#666',
    },

    // List Styles
    list: { flex: 1, paddingHorizontal: 15, paddingTop: 10 },
    listContent: { paddingBottom: 20 },
    
    // ITEM CARD
    gradeItem: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: 'white',
        paddingVertical: 12,
        paddingHorizontal: 15,
        borderRadius: 10,
        marginBottom: 8,
        elevation: 3,
        shadowColor: MAIN_COLOR, 
        shadowOpacity: 0.1,
        shadowRadius: 3,
        ...Platform.select({ ios: { shadowOffset: { width: 0, height: 1 } } }),
    },
    studentIndexContainer: { 
        flex: 1, 
        flexDirection: 'row', 
        alignItems: 'center', 
        marginRight: 10,
    },
    studentIndex: { fontSize: 16, fontWeight: 'bold', color: '#666', width: 25 },
    studentInfo: { flex: 1, marginRight: 10 },
    studentName: { fontSize: 16, fontWeight: '600', color: '#333' },
    studentId: { fontSize: 12, color: '#999', marginTop: 2 },
    
    // Score Input Block
    scoreBlock: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-end',
        width: 120, // C·ªë ƒë·ªãnh kh·ªëi ƒëi·ªÉm
    },
    statusTag: {
        fontSize: 10,
        fontWeight: 'bold',
        color: 'white',
        paddingVertical: 4,
        paddingHorizontal: 8,
        borderRadius: 15,
        overflow: 'hidden',
        marginRight: 10,
        minWidth: 55,
        textAlign: 'center'
    },
    scoreInput: {
        width: 60,
        height: 40,
        backgroundColor: '#fff',
        borderRadius: 8,
        paddingHorizontal: 5,
        fontSize: 18,
        fontWeight: 'bold',
        color: '#333',
        textAlign: 'center',
        borderWidth: 2,
    },
    
    // Save Button
    saveButtonContainer: {
        padding: 15,
        backgroundColor: 'white',
        borderTopWidth: 1,
        borderTopColor: '#eee',
    },
    saveButton: {
        backgroundColor: MAIN_COLOR,
        padding: 15,
        borderRadius: 10,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
    },
    saveButtonText: {
        color: 'white',
        fontSize: 18,
        fontWeight: 'bold',
        marginLeft: 10,
    },
});